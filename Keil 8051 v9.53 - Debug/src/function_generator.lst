C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FUNCTION_GENERATOR
OBJECT MODULE PLACED IN .\src/function_generator.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/src/function_generator.c OMF2 SMALL DEBUG OBJECTEXTEND R
                    -OM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/lia
                    -ohu/SimplicityStudio/v4_workspace/Final project_1/inc/graphics;/Users/liaohu/SimplicityStudio/v4_workspace/Final project
                    -_1/inc;/Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/inc/config;/Applications/Simplicity Studio.app/Conten
                    -ts/Eclipse/developer/sdks/8051/v4.0.3//kits/common/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sd
                    -ks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/
                    -v4.0.3//Device/EFM8BB3/peripheral_driver/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4
                    -.0.3//kits/common/drivers/efm8_joystick;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3/
                    -/kits/common/drivers/efm8_memory_lcd/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3
                    -//kits/common/drivers/efm8_memory_lcd/inc/graphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8
                    -051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;/Applications/Simplicity Studio.app/Contents/Eclipse/develope
                    -r/sdks/8051/v4.0.3//Device/shared/si8051base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4
                    -.0.3//Device/EFM8BB3/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/dr
                    -ivers/efm8_retargetserial) PRINT(.\src/function_generator.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/function_
                    -generator.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          ///////////////////////////////////////////////////////////////////////////////
   7          // function_generator.c
   8          ///////////////////////////////////////////////////////////////////////////////
   9          
  10          ///////////////////////////////////////////////////////////////////////////////
  11          // Call Graph
  12          //
  13          // FunctionGenerator_main()
  14          //  |
  15          //  +- drawSplash()
  16          //  |   +- getWaitJoystick()
  17          //  |   |   +- getJoystick()
  18          //  |
  19          //  +- drawStaticSprites()
  20          //  |   +- drawScreenSprite()
  21          //  |
  22          //  +- processInput()
  23          //  |   +- transitionDemoWaveform()
  24          //  |   +- transitionDemoFrequency()
  25          //  |
  26          //  +- drawScreen()
  27          //  |   +- drawScreenWaveform()
  28          //  |   +- drawScreenFrequency()
  29          //  |       +- drawScreenText()
  30          //  |
  31          //  +- synchFrame()
  32          //
  33          // Timer4_ISR()
  34          //
  35          // PORTMATCH_ISR()
  36          //
  37          
  38          ///////////////////////////////////////////////////////////////////////////////
  39          // Includes
  40          ///////////////////////////////////////////////////////////////////////////////
  41          #include <string.h>
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 2   

  42          #include <stdlib.h>
  43          #include "bsp.h"
  44          #include "tick.h"
  45          #include "disp.h"
  46          #include "render.h"
  47          #include "joystick.h"
  48          #include "thinfont.h"
  49          #include "function_generator.h"
  50          #include "sine.h"
  51          #include "square.h"
  52          #include "triangle.h"
  53          #include "sawtooth.h"
  54          #include "windowed_sine.h"
  55          #include "nav_up.h"
  56          #include "nav_down.h"
  57          #include "nav_left.h"
  58          #include "nav_right.h"
  59          #include "waveform_tables.h"
  60          #include "retargetserial.h"
  61          #include "InitDevice.h"
  62          ///////////////////////////////////////////////////////////////////////////////
  63          // Globals
  64          ///////////////////////////////////////////////////////////////////////////////
  65          
  66          // Generic line buffer
  67          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  68          //SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG);
  69          // Demo state variables
  70          static DemoState currentDemoState = DEMO_SINE;
  71          static SI_VARIABLE_SEGMENT_POINTER(currentTable, uint16_t, const SI_SEG_CODE) = sineTable; // current wave
             -form table for DAC output
  72          static SI_VARIABLE_SEGMENT_POINTER(currentWaveform, uint8_t, const SI_SEG_CODE) = sine_bits; // current wa
             -veform picture
  73          
  74          // Frequency selection
  75          #define SUPPORTED_NUM_FREQ 8
  76          static SI_SEGMENT_VARIABLE(frequency[SUPPORTED_NUM_FREQ], uint16_t, SI_SEG_XDATA) = {
  77                          10L,
  78                          20L,
  79                          50L,
  80                          100L,
  81                          200L,
  82                          500L,
  83                          1000L,
  84                          2000L
  85          };
  86          
  87          // Current Frequency Selection
  88          static uint8_t currentFreqIndex = 3;
  89          
  90          // Phase offset (updated when frequency is changed)
  91          static uint16_t phaseOffset = 100 * PHASE_PRECISION / SAMPLE_RATE_DAC;
  92          
  93          // Kill splash
  94          KillSpash killSplashFlag = SHOW_SPLASH;
  95          
  96          ///////////////////////////////////////////////////////////////////////////////
  97          // Supporting Functions
  98          ///////////////////////////////////////////////////////////////////////////////
  99          
 100          //-----------------------------------------------------------------------------
 101          // transitionDemoWaveform
 102          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 3   

 103          //
 104          // Change function/waveform.
 105          // Left  - change function order: sine < square < triangle < sawtooth < windowed sine
 106          // Right - change function order: sine > square > triangle > sawtooth > windowed sine
 107          //
 108          // dir - valid arguments are: JOYSTICK_E, JOYSTICK_W
 109          //
 110          
 111          
 112          //-----------------------------------------------------------------------------
 113          // transitionDemoFrequency
 114          //-----------------------------------------------------------------------------
 115          //
 116          // Change frequency of the function.
 117          // Up   - increase frequency
 118          // Down - decrease frequency
 119          //
 120          // dir - valid arguments are: JOYSTICK_N, JOYSTICK_S
 121          //
 122          static void transitionDemoFrequency(uint8_t dir)
 123          {
 124   1        if (dir == JOYSTICK_N)
 125   1        {
 126   2                // increase freq
 127   2                if(currentFreqIndex == SUPPORTED_NUM_FREQ-1)
 128   2                {
 129   3                        currentFreqIndex = 0;
 130   3                }
 131   2                else
 132   2                {
 133   3                        currentFreqIndex++;
 134   3                }
 135   2        }
 136   1        else if (dir == JOYSTICK_S)
 137   1        {
 138   2                // decrease freq
 139   2                if (currentFreqIndex == 0)
 140   2                {
 141   3                        currentFreqIndex = SUPPORTED_NUM_FREQ-1;
 142   3                }
 143   2                else
 144   2                {
 145   3                        currentFreqIndex--;
 146   3                }
 147   2        }
 148   1      
 149   1        phaseOffset = frequency[currentFreqIndex] * PHASE_PRECISION / SAMPLE_RATE_DAC;
 150   1      }
 151          
 152          //-----------------------------------------------------------------------------
 153          // getJoystick
 154          //-----------------------------------------------------------------------------
 155          //
 156          // Get new ADC sample and return joystick direction. Valid return values:
 157          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 158          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 159          //
 160          static uint8_t getJoystick(void)
 161          {
 162   1        uint32_t mv;
 163   1        uint8_t dir;
 164   1      
 165   1        ADC0CN0_ADBUSY = 1;
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 4   

 166   1        while (!ADC0CN0_ADINT);
 167   1        ADC0CN0_ADINT = 0;
 168   1      
 169   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
 170   1      
 171   1        dir = JOYSTICK_convert_mv_to_direction(mv);
 172   1      
 173   1        return dir;
 174   1      }
 175          
 176          //-----------------------------------------------------------------------------
 177          // getWaitJoystick
 178          //-----------------------------------------------------------------------------
 179          //
 180          // Get joystick input. If joystick was moved, wait for release. Return joystick
 181          // direction. Valid return values:
 182          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 183          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 184          //
 185          static uint8_t getWaitJoystick(void)
 186          {
 187   1        uint8_t dir, dirSave;
 188   1      
 189   1        dir = getJoystick();
 190   1        dirSave = dir;
 191   1      
 192   1        // wait for release then transition
 193   1        while (dir != JOYSTICK_NONE)
 194   1        {
 195   2          dir = getJoystick();
 196   2        }
 197   1      
 198   1        return dirSave;
 199   1      }
 200          
 201          //-----------------------------------------------------------------------------
 202          // getJoystickDemo
 203          //-----------------------------------------------------------------------------
 204          //
 205          // Get and process joystick input.
 206          // Left/Right = change function/waveform
 207          // Up/Down    = change frequency
 208          //
 209          static void processInput(uint8_t dir)
 210          {
 211   1        // process input
 212   1        if ((dir == JOYSTICK_E) || (dir == JOYSTICK_W))
 213   1        {
 214   2          //transitionDemoWaveform(dir);
 215   2        }
 216   1        else if ((dir == JOYSTICK_N) || (dir == JOYSTICK_S))
 217   1        {
 218   2          transitionDemoFrequency(dir);
 219   2        }
 220   1      }
 221          
 222          //-----------------------------------------------------------------------------
 223          // drawScreenText
 224          //-----------------------------------------------------------------------------
 225          //
 226          // Show one line of text on the screen
 227          //
 228          // str - pointer to string text (0 - 21 characters) to display
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 5   

 229          // rowNum - row number of the screen (0 - 127)
 230          // fontScale - font scaler (1 - 4)
 231          //
 232          static void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum)
 233          {
 234   1        uint8_t i;
 235   1      
 236   1        for (i = 0; i < FONT_HEIGHT; i++)
 237   1        {
 238   2          RENDER_ClrLine(Line);
 239   2          RENDER_StrLine(Line, 4, i, str);
 240   2          DISP_WriteLine(rowNum + i, Line);
 241   2        }
 242   1      }
 243          
 244          //-----------------------------------------------------------------------------
 245          // drawScreenSprite
 246          //-----------------------------------------------------------------------------
 247          //
 248          // Displays a sprite on the screen
 249          //
 250          // sprite - pointer to sprite/picture
 251          // width  - width of sprite
 252          // height - height of sprite
 253          // xPos - beginning row number on the screen (0 - 127)
 254          // yPos - beginning col number on the screen (0 - 127)
 255          //
 256          static void drawScreenSprite(SI_VARIABLE_SEGMENT_POINTER(sprite, uint8_t, RENDER_SPRITE_SEG),
 257                                               uint8_t width, uint8_t height,
 258                                               uint8_t xPos, uint8_t yPos)
 259          {
 260   1        uint8_t i;
 261   1      
 262   1        for (i = 0; i < height; i++)
 263   1        {
 264   2          RENDER_ClrLine(Line);
 265   2          RENDER_SpriteLine(Line, xPos, i, sprite, width);
 266   2          DISP_WriteLine(yPos + i, Line);
 267   2        }
 268   1      }
 269          
 270          //-----------------------------------------------------------------------------
 271          // drawScreenWaveform
 272          //-----------------------------------------------------------------------------
 273          //
 274          // Draw screen waveform and left/right arrows
 275          //
 276          static void drawScreenWaveform(void)
 277          {
 278   1        uint8_t i; // row index for waveform sprite
 279   1        uint8_t j = 0; // row index for nav sprites
 280   1      
 281   1        for (i = 0; i < sine_height; i++)
 282   1        {
 283   2              RENDER_ClrLine(Line);
 284   2              RENDER_SpriteLine(Line, X_POS_WAVEFORM, i, currentWaveform, sine_width);
 285   2      
 286   2              if ((i >= Y_POS_NAV_ARROW_LEFT_RIGHT) && (i < Y_POS_NAV_ARROW_LEFT_RIGHT + nav_left_height))
 287   2              {
 288   3                RENDER_SpriteLine(Line, X_POS_NAV_ARROW_LEFT, j, nav_left_bits, nav_left_width);
 289   3                RENDER_SpriteLine(Line, X_POS_NAV_ARROW_RIGHT, j, nav_right_bits, nav_right_width);
 290   3                j++;
 291   3              }
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 6   

 292   2              DISP_WriteLine(Y_POS_WAVEFORM + i, Line);
 293   2        }
 294   1      
 295   1      }
 296          
 297          //-----------------------------------------------------------------------------
 298          // drawScreenFrequency
 299          //-----------------------------------------------------------------------------
 300          //
 301          // Update the function frequency on the screen. Format:
 302          //   f = 1000 Hz
 303          //
 304          static void drawScreenFrequency(void)
 305          {
 306   1        char freqStr[22];
 307   1      
 308   1        // display frequency on screen
 309   1        RETARGET_SPRINTF(freqStr, "     f = %d Hz", frequency[currentFreqIndex]);
 310   1      
 311   1        drawScreenText(freqStr, Y_POS_FREQ);
 312   1      }
 313          
 314          //-----------------------------------------------------------------------------
 315          // drawSplash
 316          //-----------------------------------------------------------------------------
 317          //
 318          // Display splash screen with instructions.
 319          //
 320          static void drawSplash(void)
 321          {
 322   1              uint16_t ticks = GetTickCount();
 323   1      
 324   1              drawScreenText(" __________________", 7);
 325   1              drawScreenText(" FUNCTION GENERATOR", 4);
 326   1      
 327   1              drawScreenText("USE SCOPE TO OBSERVE", 48);
 328   1              drawScreenText("    DAC OUTPUTS:", 58);
 329   1              drawScreenText("    P3.0 & P3.1", 74);
 330   1      
 331   1              // kill splash if timeout elapses, any button is pressed, or joystick
 332   1              // is moved in any direction
 333   1              while (((GetTickCount() - ticks) < SPASH_TIMEOUT) &&
 334   1                              (killSplashFlag == SHOW_SPLASH) &&
 335   1                              (getWaitJoystick() == JOYSTICK_NONE));
 336   1      }
 337          
 338          //-----------------------------------------------------------------------------
 339          // drawScreenStaticSprites
 340          //-----------------------------------------------------------------------------
 341          //
 342          // Draw static/non-changing sprites on screen. Static sprites are up and down
 343          // arrows. Left/right arrows are drawn with waveform.
 344          //
 345          static void drawScreenStaticSprites(void)
 346          {
 347   1        drawScreenSprite(nav_up_bits, nav_up_width, nav_up_height,
 348   1                                 X_POS_NAV_ARROW_UP_DOWN, Y_POS_NAV_ARROW_UP);
 349   1        drawScreenSprite(nav_down_bits, nav_down_width, nav_down_height,
 350   1                                 X_POS_NAV_ARROW_UP_DOWN, Y_POS_NAV_ARROW_DOWN);
 351   1      }
 352          
 353          //-----------------------------------------------------------------------------
 354          // drawScreen
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 7   

 355          //-----------------------------------------------------------------------------
 356          //
 357          // Draw dynamic/changeable sprites and info (waveform and frequency) on screen.
 358          //
 359          static void drawScreen(void)
 360          {
 361   1        drawScreenWaveform();
 362   1        drawScreenFrequency();
 363   1      }
 364          
 365          //-----------------------------------------------------------------------------
 366          // synchFrame
 367          //-----------------------------------------------------------------------------
 368          //
 369          // Delay until start of next frame
 370          //
 371          static void synchFrame(void)
 372          {
 373   1        static uint16_t lastTick = 0;
 374   1        uint16_t tick;
 375   1      
 376   1        // Render at 50 Hz
 377   1        while (((tick = GetTickCount()) - lastTick) < HZ_TO_MS(DEMO_FRAME_RATE));
 378   1        lastTick = tick;
 379   1      }
 380          
 381          ///////////////////////////////////////////////////////////////////////////////
 382          // Interrupt Service Routines
 383          ///////////////////////////////////////////////////////////////////////////////
 384          
 385          SI_INTERRUPT_USING (TIMER4_ISR, TIMER4_IRQn, 1)
 386          {
 387   1        static uint16_t phaseAcc = 0;       // Holds phase accumulator
 388   1      
 389   1        SI_UU16_t temp;   // The temporary value that holds
 390   1                                                                                // value before being written
 391   1                                                                                // to the DAC
 392   1        
 393   1        TMR4CN0 &= ~TMR3CN0_TF3H__BMASK;    // Clear Timer4 overflow flag
 394   1      
 395   1        phaseAcc += phaseOffset;            // Increment phase accumulator
 396   1      
 397   1        // Read the table value
 398   1        temp.u16 = currentTable[phaseAcc >> 8];
 399   1      
 400   1        // Set the value of <temp> to the next output of DAC at full-scale
 401   1        // amplitude. The rails are 0x000 and 0xFFF. DAC low byte must be
 402   1        // written first.
 403   1      
 404   1        SFRPAGE = PG4_PAGE;
 405   1      
 406   1        DAC1L = DAC0L = temp.u8[LSB];
 407   1        DAC1H = DAC0H = temp.u8[MSB];
 408   1      }
 409          
 410          //-----------------------------------------------------------------------------
 411          // PMATCH_ISR
 412          //-----------------------------------------------------------------------------
 413          //
 414          // The Port Match interrupt occurs whenever (Pn & PnMASK) != (PnMAT & PnMASK).
 415          // We must disable the interrupt and wait until the button is released in
 416          // main, or else the interrupt will trigger multiple times.  It is generally
 417          // not good practice to sit in an ISR for int32_t periods of time.
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 8   

 418          //
 419          SI_INTERRUPT(PMATCH_ISR, PMATCH_IRQn)
 420          {
 421   1        uint8_t SFRPAGE_save = SFRPAGE;
 422   1      
 423   1        // Kill splash and run demo if user presses any button
 424   1        if((BSP_PB0 == BSP_PB_PRESSED) || (BSP_PB1 == BSP_PB_PRESSED))
 425   1        {
 426   2                killSplashFlag = KILL_SPLASH;
 427   2        }
 428   1      
 429   1        SFRPAGE = PG2_PAGE;
 430   1      
 431   1        EIE1 &= ~0x02;                     // Disable Port Match interrupts to
 432   1                                           // prevent multiple interrupts from
 433   1                                           // occurring while the button is
 434   1                                           // pressed
 435   1        SFRPAGE = SFRPAGE_save;
 436   1      }
 437          
 438          ///////////////////////////////////////////////////////////////////////////////
 439          // Driver Function
 440          ///////////////////////////////////////////////////////////////////////////////
 441          void FunctionGenerator_main(void)
 442          {
 443   1                uint8_t i;
 444   1                uint8_t x=0;
 445   1                uint8_t y=0;
 446   1                uint8_t j;
 447   1                char text[16];
 448   1              // char xdata timer[16];
 449   1               unsigned char inputcharacter;
 450   1        //drawSplash();
 451   1      
 452   1        //DISP_ClearAll();
 453   1       // drawScreenStaticSprites();
 454   1      
 455   1        /*while(1)
 456   1        {
 457   1          processInput(getWaitJoystick());
 458   1          drawScreen();
 459   1          synchFrame();
 460   1        }*/
 461   1      
 462   1               while(1){
 463   2              //char **timer = malloc(sizeof(char *) * 27);
 464   2      
 465   2              RETARGET_PRINTF ("\nEnter character: ");
 466   2                     inputcharacter = getchar();
 467   2                     RETARGET_PRINTF ("\nCharacter entered: %c", inputcharacter);
 468   2                     RETARGET_PRINTF ("\n     Value in Hex: %bx", inputcharacter);
 469   2                     sprintf(text,"%c",inputcharacter);
 470   2                     drawScreenText(text,0);
 471   2      
 472   2              if(getWaitJoystick()==JOYSTICK_S)
 473   2              {
 474   3                      y=y+8;
 475   3      
 476   3              }
 477   2      
 478   2      
 479   2      }
 480   1      }
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/05/2017 14:54:41 PAGE 9   

*** WARNING C280 IN LINE 443 OF /Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/src/function_generator.c: 'i
             -': unreferenced local variable
*** WARNING C280 IN LINE 446 OF /Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/src/function_generator.c: 'j
             -': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    792    ----
   CONSTANT SIZE    =   8396    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      62
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
